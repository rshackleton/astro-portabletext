---
import { LIST_NEST_MODE_HTML, nestLists } from '@portabletext/toolkit';
import defaultComponents, { mergeComponents } from './defaultComponents';
import type { InputValue, PortableTextAstroContext } from './ptTypes';
import type { MissingComponentHandler, NodeType, PortableTextComponents } from './rendererTypes';
import RenderNode from './RenderNode.astro';
import { getWarningMessage, printWarning } from './warnings';

export interface Props {
  components?: PortableTextComponents;
  context?: PortableTextAstroContext;
  value: InputValue;
  onMissingComponent?: MissingComponentHandler | boolean;
}

const { components = {}, context = {}, onMissingComponent = true, value } = Astro.props;

const mergedComponents = mergeComponents(defaultComponents, components);
const blocks = nestLists(Array.isArray(value) ? value : [value], LIST_NEST_MODE_HTML);

const missingComponentHandler = (type: string, nodeType: NodeType) => {
  if (onMissingComponent === false) {
    return;
  }

  const message = getWarningMessage(type, nodeType);

  if (typeof onMissingComponent === 'function') {
    onMissingComponent(message, { type, nodeType });
    return;
  }

  printWarning(message);
};
---

{
  blocks.map((node, index) => (
    <RenderNode
      global={{
        components: mergedComponents as any,
        context,
        missingComponentHandler,
        ptBlocks: blocks,
        ptRawValue: value,
      }}
      options={{
        node,
        isInline: false,
        indexInParent: index,
      }}
    />
  ))
}
